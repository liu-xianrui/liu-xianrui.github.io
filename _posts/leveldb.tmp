Leveldb

Jeff Dean, Sanjay Ghemawat

The leveldb library provides a persistent key value store. Keys and values are arbitrary byte arrays. The keys are ordered within the key value store according to a user-specified comparator function.

leveldb是一个提供持久化存储的Key/Value库. Key和Value均为字节数组(byte arrays)类型。所有的Key在库中按照顺序排列，用户可以自定义Key的比较函数。

Opening A Database
打开一个数据库

A leveldb database has a name which corresponds to a file system directory. All of the contents of database are stored in this directory. The following example shows how to open a database, creating it if necessary:

(一个leveldb数据库都会对应到文件系统中一个目录。数据库中所有的内容都存放在这个这个目录里，下面的例子展示了如何打开(如果不存在则创建)一个数据库)

  #include <cassert>
  #include "leveldb/db.h"

  leveldb::DB* db;
  leveldb::Options options;
  options.create_if_missing = true;
  leveldb::Status status = leveldb::DB::Open(options, "/tmp/testdb", &db);
  assert(status.ok());
  ...


(如果想要在数据库已经存在时抛出错误，可以在调用leveldb::BD::Open前添加以下选项)
If you want to raise an error if the database already exists, add the following line before the leveldb::DB::Open call:
  options.error_if_exists = true;

Status (状态)

大多数leveldb里的函数会返回leveldb::Status类型用来检查一个操作是否成功，如果失败的话还可以用来打印错误信息
You may have noticed the leveldb::Status type above. Values of this type are returned by most functions in leveldb that may encounter an error. You can check if such a result is ok, and also print an associated error message:

   leveldb::Status s = ...;
   if (!s.ok()) cerr << s.ToString() << endl;


Closing A Database (关闭一个数据库)

当操作完数据库后，直接delete数据库对象即可， 比如：
When you are done with a database, just delete the database object. Example:

  ... open the db as described above ...
  ... do something with db ...
  delete db;


Reads And Writes (读和写)

leveldb提供了Put、Delete和Get操作来进行修改/查询操作。比如,下面的代码将key1存储的值move到key2里。
The database provides Put, Delete, and Get methods to modify/query the database. For example, the following code moves the value stored under key1 to key2.

  std::string value;
  leveldb::Status s = db->Get(leveldb::ReadOptions(), key1, &value);
  if (s.ok()) s = db->Put(leveldb::WriteOptions(), key2, value);
  if (s.ok()) s = db->Delete(leveldb::WriteOptions(), key1);

Atomic Updates (原子更新)

需要注意的是如果程序在执行到Put(key2)和Delete(k1)之间异常结束的话。相同的value会被存储到多个key中。这个问题可以使用WriteBatch类来原子性的应用"a set of updates"作来避免。
Note that if the process dies after the Put of key2 but before the delete of key1, the same value may be left stored under multiple keys. Such problems can be avoided by using the WriteBatch class to atomically apply a set of updates:

  #include "leveldb/write_batch.h"
  ...
  std::string value;
  leveldb::Status s = db->Get(leveldb::ReadOptions(), key1, &value);
  if (s.ok()) {
    leveldb::WriteBatch batch;
    batch.Delete(key1);
    batch.Put(key2, value);
    s = db->Write(leveldb::WriteOptions(), &batch);
  }

WriteBatch 保存一系列的对数据库的操作，并且这些操作在batch中会被按顺序应用。需要注意的是我们再调用Put前先调用的Delete，所以(??这块翻译不通过)
The WriteBatch holds a sequence of edits to be made to the database, and these edits within the batch are applied in order. Note that we called Delete before Put so that if key1 is identical to key2, we do not end up erroneously dropping the value entirely.

WriteBatch除了满足原子操作外,还可以通过将大量独立操作放到一个batch中的方法来加速批量更新操作(?? 翻译individual mutations对吗)
Apart from its atomicity benefits, WriteBatch may also be used to speed up bulk updates by placing lots of individual mutations into the same batch.

Synchronous Writes (同步写)
(PS: 为了解决CPU与设备之间速度不匹配矛盾，及协调逻辑记录大小和物理记录大小不一致的问题，提高CPU和设备之间的并行性.减少I/O操作对CPU的中断次数，放宽对CPU中断响应时间要求，操作系统普遍采取缓冲技术，缓冲用于平滑两种不同速度的硬部件或设备之间的信息传输，在主存储器中开辟一个存储区，称为缓冲区，专门用于临时存放I/O操作的数据
 实现缓冲技术的基本思想如下：当进程执行写操作输出数据时(如系统write调用)，先向系统申请一个输出缓冲区，然后，将数据送至缓冲区。若是顺序写请求，则不断的把数据填入缓冲区，直到装满为止，此后，进程可以继续计算，同时，系统将缓冲区的内容写到设备上。当进程执行读操作输入数据时，先向系统申请一个输入缓冲区，系统将设备上的一条物理记录(比如一个扇区的数据)读至缓冲区，然后根据要求，把当前所需要的逻辑记录从缓冲区选出并传送给进程。
 用户上述目的的专用主存区称之为I/O缓冲区。在输出数据时，只有在系统来不及腾空缓冲区而进程有需要写数据时，它才需要等待；在输入数据时，仅当缓冲区为空而进程又要从中读取数据时，它才需要等待。其他时间可以进一步提高CPU和设备的并行性，设备和设备之间的并行性，从而提高系统效率,在操作系统的管理下，常开辟出缓冲区以服务于各种设备(如磁盘IO和网络IO)，常见的缓冲技术有单缓冲、双缓冲和多缓冲
        --操作系统教程 孙钟秀 5.4
 )。


默认情况下,所有向leveldb的写操作都是异步的，即将要写的内容推给操作系统后就返回。操作系统内存向底层的持久化存储写是异步的。可以通过打开sync标识来保证要写的数据已经完全写入了持久化存储里。(在Posix系统下，通过在return前调用fsync(...)或fdatasync(...)或msync(..., MS_SYNC)实现)
By default, each write to leveldb is asynchronous: it returns after pushing the write from the process into the operating system. The transfer from operating system memory to the underlying persistent storage happens asynchronously. The sync flag can be turned on for a particular write to make the write operation not return until the data being written has been pushed all the way to persistent storage. (On Posix systems, this is implemented by calling either fsync(...) or fdatasync(...) or msync(..., MS_SYNC) before the write operation returns.)
  leveldb::WriteOptions write_options;
  write_options.sync = true;
  db->Put(write_options, ...);

异步写往往比同步写块1000倍以上。异步写的缺点是**机器**的crash可能会导致最新的几条改变丢失。需要说明的是仅仅是**writing process**的crash不会导致数据的丢失(an update .... ?)
Asynchronous writes are often more than a thousand times as fast as synchronous writes. The downside of asynchronous writes is that a crash of the machine may cause the last few updates to be lost. Note that a crash of just the writing process (i.e., not a reboot) will not cause any loss since even when sync is false, an update is pushed from the process memory into the operating system before it is considered done.

(??翻译不是很通顺)通常情况下使用异步写是安全的。比如,当填充大量数据到数据库时,可以在crash之后通过重新启动批量加载来处理(lost updates)。还有一个混合方案就是:每N条数据都是同步写，当crash的时候，批量加载操作从上一次的同步写操作完成之后的位置之后进行。(同步写操作可以做个标示来描述crash的后该从哪里启动)
Asynchronous writes can often be used safely. For example, when loading a large amount of data into the database you can handle lost updates by restarting the bulk load after a crash. A hybrid scheme is also possible where every Nth write is synchronous, and in the event of a crash, the bulk load is restarted just after the last synchronous write finished by the previous run. (The synchronous write can update a marker that describes where to restart on a crash.)

可以用WriteBatch来替换异步写。多个update操作可以使用WriteBatch并且使用一个同步写(比如，将write_options.sync设置为true).同步写额外的cost会被均摊到一次批量写操作里(译注: 一次批量操作n个写，使用同步写+WriteBatch方法，一次写操作平均开销为(一次同步写的cost/n)
WriteBatch provides an alternative to asynchronous writes. Multiple updates may be placed in the same WriteBatch and applied together using a synchronous write (i.e., write_options.sync is set to true). The extra cost of the synchronous write will be amortized across all of the writes in the batch.

Concurrency (并发)

一个数据库一次只能被一个进程打开。leveldb的实现依赖于对操作系统的一次加锁来防止misuse。在一个进程内，同一个leveldb::DB可以安全的被多个线程操作，比如，不同的线程可以一边向fetch iterators写数据一边调用Get，而不需要额外的同步机制(leveldb内部会自己实现同步机制)。然而,其他object(比如Iterator或者WriteBatch)则需要外部的同步机制。如果两个线程共用一个object,它们必须通过使用自己的锁机制来保证正常运行。更多的细节在public header files中。
A database may only be opened by one process at a time. The leveldb implementation acquires a lock from the operating system to prevent misuse. Within a single process, the same leveldb::DB object may be safely shared by multiple concurrent threads. I.e., different threads may write into or fetch iterators or call Get on the same database without any external synchronization (the leveldb implementation will automatically do the required synchronization). However other objects (like Iterator and WriteBatch) may require external synchronization. If two threads share such an object, they must protect access to it using their own locking protocol. More details are available in the public header files.

Iteration(迭代器)

下面的例子演示了如何打印数据库中的所有键值对。
The following example demonstrates how to print all key,value pairs in a database.

  leveldb::Iterator* it = db->NewIterator(leveldb::ReadOptions());
  for (it->SeekToFirst(); it->Valid(); it->Next()) {
    cout << it->key().ToString() << ": "  << it->value().ToString() << endl;
  }
  assert(it->status().ok());  // Check for any errors found during the scan
  delete it;

下面的变体演示了如何得到某一范围[start,limit)内的所有key
The following variation shows how to process just the keys in the range [start,limit):
  for (it->Seek(start);
       it->Valid() && it->key().ToString() < limit;
       it->Next()) {
    ...
  }

也可以进行逆向遍历(警告: 逆向遍历可能有时候比正向遍历慢)
You can also process entries in reverse order. (Caveat: reverse iteration may be somewhat slower than forward iteration.)
  for (it->SeekToLast(); it->Valid(); it->Prev()) {
    ...
  }

Snapshots (快照)

快照功能提供了整个数据库的一致性只读视图。如果ReadOptions::snapshot不为空就说明read打开了一个数据库状态的指定版本。如果ReadOptions::snapshot为空, read会打开一个最新状态的隐式快照(implicit snapshot of the current state)
Snapshots provide consistent read-only views over the entire state of the key-value store. ReadOptions::snapshot may be non-NULL to indicate that a read should operate on a particular version of the DB state. If ReadOptions::snapshot is NULL, the read will operate on an implicit snapshot of the current state.

快照可以通过DB::GetSnapshot()函数来创建:
Snapshots are created by the DB::GetSnapshot() method:

  leveldb::ReadOptions options;
  options.snapshot = db->GetSnapshot();
  ... apply some updates to db ...
  leveldb::Iterator* iter = db->NewIterator(options);
  ... read using iter to view the state when the snapshot was created ...
  delete iter;
  db->ReleaseSnapshot(options.snapshot);

如果快照不再需要了，需要通过BD::ReleaseSnapshot接口来释放。这样可以摆脱为了支持快照功能而维护的状态(??翻译不通畅)。
Note that when a snapshot is no longer needed, it should be released using the DB::ReleaseSnapshot interface. This allows the implementation to get rid of state that was being maintained just to support reading as of that snapshot.

Slice (片)

it->key()和it->value()返回的值的类型为leveldb::Slice。 Slice是一个简单的结构体, 它包含一个指向外部数组的指针以及指针长度。返回一个Slice比起返回std::string来性能更高，原因是使用Slice不需要拷贝大量的key或者value。此外, leveldb的函数不会返回C风格的null-terminated字符串。原因是leveldb允许key或者value包含'\0' 字符
The return value of the it->key() and it->value() calls above are instances of the leveldb::Slice type. Slice is a simple structure that contains a length and a pointer to an external byte array. Returning a Slice is a cheaper alternative to returning a std::string since we do not need to copy potentially large keys and values. In addition, leveldb methods do not return null-terminated C-style strings since leveldb keys and values are allowed to contain '\0' bytes.

C++ strings and null-terminated C-style strings can be easily converted to a Slice:
C++ strings和 null-terminated C-style strings 可以轻松的转为Slice类型

   leveldb::Slice s1 = "hello";

   std::string str("world");
   leveldb::Slice s2 = str;
A Slice can be easily converted back to a C++ string:
也可以很容易将一个Slice转换成C++ string
   std::string str = s1.ToString();
   assert(str == std::string("hello"));
Be careful when using Slices since it is up to the caller to ensure that the external byte array into which the Slice points remains live while the Slice is in use. For example, the following is buggy:
需要注意的是调用Slices的时候要保证在Slice正在使用时，Slice point引用的外部数组(external byte array)是有效的。比如下面的调用是有问题的。
   leveldb::Slice slice;
   if (...) {
     std::string str = ...;
     slice = str;
   }
   Use(slice);
When the if statement goes out of scope, str will be destroyed and the backing storage for slice will disappear.
当str超出作用域时,它将被释放掉，这会导致slice引用的物理内存地址将不存在。

Comparators  比较器

The preceding examples used the default ordering function for key, which orders bytes lexicographically. You can however supply a custom comparator when opening a database. For example, suppose each database key consists of two numbers and we should sort by the first number, breaking ties by the second number. First, define a proper subclass of leveldb::Comparator that expresses these rules:
上面的例子都是使用默认的比较函数(按词典数据)来对key进行排序。当打开一个数据库的时候，也可以使用自定义的比较函数。比如，假设一个数据库的key由两个数字组成,并且我们想要让其按照第一个数字来排序,如果第一个数字相同则按照第二个数字排序。首先，定义一个leveldb::Comparator的子类来实现上述规则

  class TwoPartComparator : public leveldb::Comparator {
   public:
    // Three-way comparison function:
    //   if a < b: negative result
    //   if a > b: positive result
    //   else: zero result
    int Compare(const leveldb::Slice& a, const leveldb::Slice& b) const {
      int a1, a2, b1, b2;
      ParseKey(a, &a1, &a2);
      ParseKey(b, &b1, &b2);
      if (a1 < b1) return -1;
      if (a1 > b1) return +1;
      if (a2 < b2) return -1;
      if (a2 > b2) return +1;
      return 0;
    }

    // Ignore the following methods for now:
    const char* Name() const { return "TwoPartComparator"; }
    void FindShortestSeparator(std::string*, const leveldb::Slice&) const { }
    void FindShortSuccessor(std::string*) const { }
  };

Now create a database using this custom comparator:
现在，打开一个数据库来使用自定义比较器

  TwoPartComparator cmp;
  leveldb::DB* db;
  leveldb::Options options;
  options.create_if_missing = true;
  options.comparator = &cmp;
  leveldb::Status status = leveldb::DB::Open(options, "/tmp/testdb", &db);
  ...
Backwards compatibility (向后兼容性,即旧版本兼容性)

The result of the comparator's Name method is attached to the database when it is created, and is checked on every subsequent database open. If the name changes, the leveldb::DB::Open call will fail. Therefore, change the name if and only if the new key format and comparison function are incompatible with existing databases, and it is ok to discard the contents of all existing databases.
比较函数的名字在当数据库被创建的时候就确定了。并且随后的每次数据库的打开都会对比较函数名字进行检查，如果比较函数名字改变了, 调用leveldb::DB::open函数会失败。因此只有当新的key的格式和比较函数和现有的数据不兼容时,并且允许丢弃现有的所有数据时才能改变比较函数的名字,

You can however still gradually evolve your key format over time with a little bit of pre-planning. For example, you could store a version number at the end of each key (one byte should suffice for most uses). When you wish to switch to a new key format (e.g., adding an optional third part to the keys processed by TwoPartComparator), (a) keep the same comparator name (b) increment the version number for new keys (c) change the comparator function so it uses the version numbers found in the keys to decide how to interpret them.
(??没懂,翻译不通顺)不过，你任然可以在前期规划的基础上中逐渐的升级key的格式。比如, 你可以在每个key的结尾添加一个version字段(对大部分用户来说，占用一个字节就够了).当你想要使用新的key格式(比如在key中添加一个可以选的第三个字段??不通顺) (a) 保持比较函数名字不变 (b)对新类型的key增加版本号 (c)改变比较函数,让其可以通过key的版本号来做不同的处理

Performance 性能

Performance can be tuned by changing the default values of the types defined in include/leveldb/options.h.
可以通过调整在include/leveldb/options.h中定义的变量的值来调整性能

Block size 块大小

leveldb groups adjacent keys together into the same block and such a block is the unit of transfer to and from persistent storage. The default block size is approximately 4096 uncompressed bytes. Applications that mostly do bulk scans over the contents of the database may wish to increase this size. Applications that do a lot of point reads of small values may wish to switch to a smaller block size if performance measurements indicate an improvement. There isn't much benefit in using blocks smaller than one kilobyte, or larger than a few megabytes. Also note that compression will be more effective with larger block sizes.
leveldb 将相邻的key聚集到同一个block中。并且一个block是进/出持久化存储的(最小)单位。默认的块大小近似于4096个未压缩的bytes。如果一个应用大部分使用场景都是对数据库内容进行批量可以将block size调大。如果一个应用大部分使用场景都是读取小数据可以将block size 调小(性能测试结果表明确实有提示的前提下). 将blocks调整到一千字节以内或者几兆字节没有太大好处。还需要说明的是更大的block size对数据压缩有好处。

Compression 压缩

Each block is individually compressed before being written to persistent storage. Compression is on by default since the default compression method is very fast, and is automatically disabled for uncompressible data. In rare cases, applications may want to disable compression entirely, but should only do so if benchmarks show a performance improvement:
每个块在写到持久化存储前都会进行压缩. 由于默认的压缩算法非常快，所以压缩默认是开启的。并且对于不可压缩数据默认会关闭压缩。在极少数的情况下,应用程序想要关闭压缩功能, 但是必须在benchmarks表明有性能提升的情况下再关闭压缩功能。

  leveldb::Options options;
  options.compression = leveldb::kNoCompression;
  ... leveldb::DB::Open(options, name, ...) ....

Cache 缓存

The contents of the database are stored in a set of files in the filesystem and each file stores a sequence of compressed blocks. If options.cache is non-NULL, it is used to cache frequently used uncompressed block contents.
数据库的内容存放在一系列的文件中，并且每个文件存储着一系列的压缩的块。如果options.cache 是 non-NULL, 它将用来缓存经常被用到的未经过压缩的数据块内容。

  #include "leveldb/cache.h"

  leveldb::Options options;
  options.cache = leveldb::NewLRUCache(100 * 1048576);  // 100MB cache
  leveldb::DB* db;
  leveldb::DB::Open(options, name, &db);
  ... use the db ...
  delete db
  delete options.cache;
Note that the cache holds uncompressed data, and therefore it should be sized according to application level data sizes, without any reduction from compression. (Caching of compressed blocks is left to the operating system buffer cache, or any custom Env implementation provided by the client.)
When performing a bulk read, the application may wish to disable caching so that the data processed by the bulk read does not end up displacing most of the cached contents. A per-iterator option can be used to achieve this:
需要说明的是cache保存着未压缩的数据。因此，需要根据应用级数据大小来设置。而不是按照压缩后的大小。(??翻译不通顺, 缓存压缩后的blocks留给操作系统缓冲区或者任何client提供的custom Env 实现)

  leveldb::ReadOptions options;
  options.fill_cache = false;
  leveldb::Iterator* it = db->NewIterator(options);
  for (it->SeekToFirst(); it->Valid(); it->Next()) {
    ...
  }
Key Layout

Note that the unit of disk transfer and caching is a block. Adjacent keys (according to the database sort order) will usually be placed in the same block. Therefore the application can improve its performance by placing keys that are accessed together near each other and placing infrequently used keys in a separate region of the key space.
注意disk transfer和caching的单位都是block。相邻的keys(依赖数据库的排序)往往放到同一个block中。因此应用程序可以通过将一起被访问的keys放到一起以及将不常使用的keys放到一个单独的region中来提高性能(??如何这样做)

For example, suppose we are implementing a simple file system on top of leveldb. The types of entries we might wish to store are:
比如: 假设我们再leveldb之上实现了一个简单的文件系统。我们想要存储的条目是:

   filename -> permission-bits, length, list of file_block_ids
   file_block_id -> data

We might want to prefix filename keys with one letter (say '/') and the file_block_id keys with a different letter (say '0') so that scans over just the metadata do not force us to fetch and cache bulky file contents.
我们可能想要将filename的key加一个前缀(比如 '/') 将file_block_id的key加另一个前缀(比如'0')。这样的话仅仅扫描metadata的话可以不用缓存笨重的文件内容。

Filters 过滤器

Because of the way leveldb data is organized on disk, a single Get() call may involve multiple reads from disk. The optional FilterPolicy mechanism can be used to reduce the number of disk reads substantially.
由于leveldb的数据组织在磁盘上。一个Get()调用可能会执行多次读磁盘操作。FilterPolicy机制可以用来大幅减少读磁盘的次数。

   leveldb::Options options;
   options.filter_policy = NewBloomFilterPolicy(10);
   leveldb::DB* db;
   leveldb::DB::Open(options, "/tmp/testdb", &db);
   ... use the database ...
   delete db;
   delete options.filter_policy;

The preceding code associates a Bloom filter based filtering policy with the database. Bloom filter based filtering relies on keeping some number of bits of data in memory per key (in this case 10 bits per key since that is the argument we passed to NewBloomFilterPolicy). This filter will reduce the number of unnecessary disk reads needed for Get() calls by a factor of approximately a 100. Increasing the bits per key will lead to a larger reduction at the cost of more memory usage. We recommend that applications whose working set does not fit in memory and that do a lot of random reads set a filter policy.
上面的代码对数据库使用了基于布隆过滤器的策略。布隆过滤器为每个key在内存中分配一些bits(在上面的例子中, 因为我们传递给NewBloomFilterPolicy的参数是10，所以每个key有10个bits). 在调用Get操作时布隆过滤器大概会减少100倍不必要的磁盘读取次数。为每个key增加bits可以减少更多的调用次数，代价就是需要耗费更多内存。我们推荐工作集合不适合在内存并且需要做很多随机读操作的应用设置过滤策略。

If you are using a custom comparator, you should ensure that the filter policy you are using is compatible with your comparator. For example, consider a comparator that ignores trailing spaces when comparing keys. NewBloomFilterPolicy must not be used with such a comparator. Instead, the application should provide a custom filter policy that also ignores trailing spaces. For example:
如果你使用自定义的comparator。需要确保使用的过滤策略跟comparator相匹配。比如, 假设一个comparator在比较key时会忽略结尾的空格.NewBloomFilterPolicy必须不能和这个comparator一起使用。相反，应用必须提供一个自定义的也忽略末尾空格的过滤器。比如:

  class CustomFilterPolicy : public leveldb::FilterPolicy {
   private:
    FilterPolicy* builtin_policy_;
   public:
    CustomFilterPolicy() : builtin_policy_(NewBloomFilterPolicy(10)) { }
    ~CustomFilterPolicy() { delete builtin_policy_; }

    const char* Name() const { return "IgnoreTrailingSpacesFilter"; }

    void CreateFilter(const Slice* keys, int n, std::string* dst) const {
      // Use builtin bloom filter code after removing trailing spaces
      std::vector<Slice> trimmed(n);
      for (int i = 0; i < n; i++) {
        trimmed[i] = RemoveTrailingSpaces(keys[i]);
      }
      return builtin_policy_->CreateFilter(&trimmed[i], n, dst);
    }

    bool KeyMayMatch(const Slice& key, const Slice& filter) const {
      // Use builtin bloom filter code after removing trailing spaces
      return builtin_policy_->KeyMayMatch(RemoveTrailingSpaces(key), filter);
    }
  };
Advanced applications may provide a filter policy that does not use a bloom filter but uses some other mechanism for summarizing a set of keys. See leveldb/filter_policy.h for detail.
高级的应用可能提供一个不使用布隆过滤器的过滤策略。而是使用另外的一些机制来管理一系列的key。可以通过查看leveldb/filter_policy.h来获取更多内容。

Checksums 校验

leveldb associates checksums with all data it stores in the file system. There are two separate controls provided over how aggressively these checksums are verified:
leveldb为再文件系统中存储的每条数据赋予校验值。 (??待翻译)

ReadOptions::verify_checksums may be set to true to force checksum verification of all data that is read from the file system on behalf of a particular read. By default, no such verification is done.
可以设置ReadOptions::verify_checksums为true来对一个特定的读操作进行强制校验所有从文件系统中去读的的数据。默认情况下是不会校验的。

Options::paranoid_checks may be set to true before opening a database to make the database implementation raise an error as soon as it detects an internal corruption. Depending on which portion of the database has been corrupted, the error may be raised when the database is opened, or later by another database operation. By default, paranoid checking is off so that the database can be used even if parts of its persistent storage have been corrupted.
可以再打开数据库前设置Options::paranoid_checks为true来确保数据库接口在内部接口遇到坏数据后立即返回错误信息。错误信息可能在数据库打开的时候抛出，也可能在其他数据库操作中抛出，这取决于数据库的哪部分数据坏掉了。默认情况下,paranoid checking是关闭的，以便即使的某一部分持久性存储坏掉了数据库仍然可以使用。
If a database is corrupted (perhaps it cannot be opened when paranoid checking is turned on), the leveldb::RepairDB function may be used to recover as much of the data as possible
如果数据库被损坏了(可能在paranoid checking设置为true的时候它没法打开), 可以使用leveldb::RepairDB函数来尽可能的将数据修复


Approximate Sizes 近似大小

The GetApproximateSizes method can used to get the approximate number of bytes of file system space used by one or more key ranges.
可以使用GetApproximateSizes函数来得到一个key或者某个范围内的key所占用的文件系统的近似大小

   leveldb::Range ranges[2];
   ranges[0] = leveldb::Range("a", "c");
   ranges[1] = leveldb::Range("x", "z");
   uint64_t sizes[2];
   leveldb::Status s = db->GetApproximateSizes(ranges, 2, sizes);
The preceding call will set sizes[0] to the approximate number of bytes of file system space used by the key range [a..c) and sizes[1] to the approximate number of bytes used by the key range [x..z).
    前面的调用会将[a...c]之间的key使用的近似空间大小赋值给sizes[0]，将[x...z]使用的近似大小赋值给sizes[1]


Environment 环境

All file operations (and other operating system calls) issued by the leveldb implementation are routed through a leveldb::Env object. Sophisticated clients may wish to provide their own Env implementation to get better control. For example, an application may introduce artificial delays in the file IO paths to limit the impact of leveldb on other activities in the system.
所有通过leveldb的文件操作(或者其他的系统调用)都会传递一个leveldb:Env对象。复杂的客户端有可能想提供自己的Env实现来更好的控制。比如，一个应用可能在IO 上引入人工延迟来限制leveldb对系统里其他活动的冲击(??减少磁盘IO？没懂)
  class SlowEnv : public leveldb::Env {
    .. implementation of the Env interface ...
  };

  SlowEnv env;
  leveldb::Options options;
  options.env = &env;
  Status s = leveldb::DB::Open(options, ...);

Porting 移植

leveldb may be ported to a new platform by providing platform specific implementations of the types/methods/functions exported by leveldb/port/port.h. See leveldb/port/port_example.h for more details.
 可能会通过实现leveldb/port/port.h中的函数或者类型将leveldb移植到一个到一个新的平台上。查看leveldb/port/port_exampl.h来获取更多的细节

In addition, the new platform may need a new default leveldb::Env implementation. See leveldb/util/env_posix.h for an example.
另外,一个新的平台可能需要一个新的默认的leveldb::Env的实现。可以参照leveldb/util/env_posix.h中的例子。

Other Information 其他信息

Details about the leveldb implementation may be found in the following documents:
对leveldb的实现细节感兴趣的话可以看下面的文档

Implementation notes  实现说明
Format of an immutable Table file  immutable Table file 的格式
Format of a log file    log file 的格式
